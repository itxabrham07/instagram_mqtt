// Re-export the instagram_mqtt library components
export { withRealtime, withFbns, withFbnsAndRealtime, IgApiClientExt } from 'instagram_mqtt';

// Main application entry point
import { InstagramRealtimeBot } from './core/realtime-bot.js';
import { TelegramBridge } from './tg-bridge/bridge.js';
import { logger } from './utils/utils.js';
import { config } from './config.js';

console.clear();

class HyperInstaRealtime {
  constructor() {
    this.startTime = new Date();
    this.instagramBot = new InstagramRealtimeBot();
    this.telegramBridge = config.telegram?.enabled ? new TelegramBridge() : null;
    this.isShuttingDown = false;
  }

  async initialize() {
    try {
      this.showStartupBanner();
      
      console.log('üì± Connecting to Instagram...');
      await this.instagramBot.login();
      console.log('‚úÖ Instagram connected');
      
      if (this.telegramBridge) {
        console.log('üì® Initializing Telegram bridge...');
        await this.telegramBridge.initialize();
        console.log('‚úÖ Telegram bridge connected');
      }
      
      console.log('üîå Loading modules & setting up handlers...');
      await this.instagramBot.setupMessageHandlers(this.telegramBridge);
      console.log('‚úÖ Modules loaded & handlers ready');
      
      console.log('‚ö° Connecting to Instagram realtime...');
      try {
        await this.instagramBot.connectRealtime();
        console.log('‚úÖ Realtime connection established');
      } catch (error) {
        console.log('‚ö†Ô∏è Realtime connection failed, but bot will continue...');
        logger.warn('Realtime connection failed:', error.message);
      }
      
      this.showLiveStatus();
      this.setupHealthCheck();
      
    } catch (error) {
      console.log(`‚ùå Startup failed: ${error.message}`);
      logger.error('Startup error:', error);
      process.exit(1);
    }
  }

  setupHealthCheck() {
    // Health check every 30 seconds
    setInterval(() => {
      if (!this.isShuttingDown) {
        const stats = this.instagramBot.getStats();
        
        if (!stats.connected && !stats.polling) {
          logger.warn('‚ö†Ô∏è Bot is not connected via realtime or polling');
        }
        
        // Log stats every 5 minutes
        if (Date.now() % (5 * 60 * 1000) < 30000) {
          logger.info('üìä Bot stats:', stats);
        }
      }
    }, 30000);
  }

  showStartupBanner() {
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë    üöÄ HYPER INSTA REALTIME - INITIALIZING                  ‚ïë
‚ïë                                                              ‚ïë
‚ïë    ‚ö° Real-time MQTT ‚Ä¢ üîå Modular ‚Ä¢ üõ°Ô∏è Anti-Flag           ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
  }

  showLiveStatus() {
    const uptime = Date.now() - this.startTime;
    const stats = this.instagramBot.getStats();
    
    console.clear();
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë    üöÄ HYPER INSTA REALTIME - LIVE & OPERATIONAL            ‚ïë
‚ïë                                                              ‚ïë
‚ïë    ${stats.connected ? '‚úÖ Instagram: Connected via MQTT Realtime' : stats.polling ? 'üîÑ Instagram: Safe Polling Mode (Flagged)' : '‚ùå Instagram: Disconnected'}               ‚ïë
‚ïë    ${this.telegramBridge ? '‚úÖ' : '‚ùå'} Telegram: ${this.telegramBridge ? 'Connected & Bridged' : 'Disabled'}                        ‚ïë
‚ïë    ‚ö° Startup Time: ${Math.round(uptime)}ms                                  ‚ïë
‚ïë    üïí Started: ${this.startTime.toLocaleTimeString()}                                ‚ïë
‚ïë                                                              ‚ïë
‚ïë    üéØ Ready for ${stats.connected ? 'INSTANT real-time' : 'safe polling'} commands...              ‚ïë
‚ïë    ${stats.connected ? 'üõ°Ô∏è No more polling - Instagram friendly!' : 'üõ°Ô∏è Safe polling mode - won\'t get more flags!'}                ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${stats.connected ? 'üî• Bot is running with REAL-TIME MQTT!' : 'üîÑ Bot is running in SAFE POLLING MODE!'}
üí° Type .help in Instagram to see all commands
${stats.connected ? 'üö´ No more API polling - much safer from flags!' : '‚ö†Ô∏è Account flagged - using safe 45s intervals'}
    `);
  }

  async start() {
    await this.initialize();
    
    // Graceful shutdown handlers
    const shutdown = async (signal) => {
      if (this.isShuttingDown) return;
      
      console.log(`\nüõë Received ${signal}, shutting down gracefully...`);
      this.isShuttingDown = true;
      
      try {
        await this.instagramBot.disconnect();
        
        if (this.telegramBridge) {
          await this.telegramBridge.disconnect();
        }
        
        console.log('‚úÖ Hyper Insta Realtime stopped gracefully');
        process.exit(0);
      } catch (error) {
        console.error('‚ùå Error during shutdown:', error.message);
        process.exit(1);
      }
    };

    process.on('SIGINT', () => shutdown('SIGINT'));
    process.on('SIGTERM', () => shutdown('SIGTERM'));
    
    // Handle uncaught exceptions
    process.on('uncaughtException', (error) => {
      logger.error('Uncaught Exception:', error);
      shutdown('uncaughtException');
    });
    
    process.on('unhandledRejection', (reason, promise) => {
      logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
      shutdown('unhandledRejection');
    });
  }
}

// Only run if this is the main module
if (import.meta.url === `file://${process.argv[1]}`) {
  const bot = new HyperInstaRealtime();
  bot.start().catch((error) => {
    console.error('‚ùå Fatal error:', error);
    process.exit(1);
  });
}